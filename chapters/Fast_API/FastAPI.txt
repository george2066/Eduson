Микрофреймворк на PYthon для разработки API

Он состоит из двух фреймворков:
Starlett -- минифреймворк для ассинхронного бекенда
Pydantic -- длч валидации

Создан в 2018, активно используется с 2021 с появлением ассинхронности.

Программы, написанные на фастапи, быстрые и производительные

У него есть валидация данных, сериализация и ассинхронность. Он позволяет создавать ассинхронные приложения без дополнительный библиотек.

Третий по популярности фреймворк.

В общем фастапи нужен для ассинхронности. То есть нам нужно отслеживать 10 000 курьеров сразу. Тогда нам нужен фастапи. Копроративная многозадачность. Так же для соц-сетей
Пайдентик отвечает за сквозной контроль типов данных, то есть если на вход идёт словарь, а не список, то пайдентик выбрасывает сам исключение, то есть скорость разработки увеличивается на 40%.

Пайдентик добавляет к объекту класс, в котором можно явно указать типы данных, которые должны использоваться для конкретного объекта.

Как у спринга у фастапи есть депенденси инжекшон

Чтобы создать виртуальное окружение:
virtualenv venv -p python3
И активируем его:
    source venv/bin/activate

Напишем первую программу на фасте

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return "Hello, world!"


Чтобы запустить:
uvicorn main:app --reload

Можно обойтись без терминала?

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)

Да, всё равно надо вручную отключать потом
lsof -i :8000
kill -9 <PID>

Мы каждый раз заколебёмся это делать. Сделаем Makefile, в котором мы пропишем 
run:
	uvicorn main:app --reload

Теперь по команде make run в терминале запускается эта команда

У FastAPI есть интерфейс, благодаря которому и запускается сервер -- ASGI

Это интерфейс, благодаря которому все компоненты сервера дл запуска сервера запускаются в асинхронном режиме
Он состоит из двух компонентов: сервер-протокол (слушает сокеты, порты, соединяет их с клиентом и выводит логи в консоль), приложение (внутри протокола, синглтон, обрабатывает сообщения)

Докер нужен для того, чтобы пользователь мог не скачивать дополнительное ПО, а использовать ресурсы компа, на котором установлены все необходимые пакеты и файлы.

Не будем производить миграции вручную. Лучше воспользуемся alembic
alembic init migrations
Вуаля! миграции созданы! 

Для Линукс Минт на этом сайте идеально написано: https://123123123.ru/%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-docker-%D0%BD%D0%B0-linux-mint-19/
Если не заускается, то следует проверить статус демона докера: sudo systemctl status docker
И запустить его: sudo systemctl start docker
И запустить докер: sudo docker run hello-world

Ошибка!

ERROR: for pg_dev  Cannot start service db: failed to set up container networking: driver failed programming external connectivity on endpoint pg_dev (6355dd7546869780fa9cb3e962398f6d9b7c952902e88ed1d92d763967f14b96): failed to bind host port for 0.0.0.0:5432:172.18.0.2:5432/tcp: address already in use

Что делать? Нужно написать в терминале sudo systemctl status/start/stop postgresql.service

Вообще в репозитории Networking находится весь код
запомни три команды:
alembic init migrations
alembic revision --autogenerate -m "create table User"
alembic upgrade heads

















